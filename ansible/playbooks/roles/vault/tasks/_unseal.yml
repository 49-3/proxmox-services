---
- name: Vérifier si vault-1 est scellé
  shell: |
    export VAULT_ADDR="http://{{ hostvars['vault-1']['ansible_' + vault_network_interface]['ipv4']['address'] }}:{{ vault_api_port }}"
    vault status | grep Sealed | awk '{print $2}'
  args:
    executable: /bin/bash
  register: vault1_sealed
  delegate_to: vault-1
  run_once: true

- name: Vérifier si vault-2 est scellé
  shell: |
    export VAULT_ADDR="http://{{ hostvars['vault-2']['ansible_' + vault_network_interface]['ipv4']['address'] }}:{{ vault_api_port }}"
    vault status | grep Sealed | awk '{print $2}'
  args:
    executable: /bin/bash
  register: vault2_sealed
  delegate_to: vault-2
  run_once: true

- name: Vérifier si les clés existent déjà sur deploy
  shell: |
    set -o pipefail
    cat "{{ secrets_dir }}/vault/unseal_keys.txt" 2>/dev/null | wc -l
  args:
    executable: /bin/bash
  register: deploy_unseal_keys_exist
  delegate_to: deploy
  run_once: true
  ignore_errors: true

- name: Vérifier si les clés unseal existent sur vault-1
  shell: |
    set -o pipefail
    cat "{{ secrets_dir }}/vault/unseal_keys.txt" 2>/dev/null | wc -l
  args:
    executable: /bin/bash
  register: vault1_unseal_keys_exist
  delegate_to: vault-1
  run_once: true
  ignore_errors: true

- name: Vérifier si les clés unseal existent sur vault-2
  shell: |
    set -o pipefail
    cat "{{ secrets_dir }}/vault/unseal_keys.txt" 2>/dev/null | wc -l
  args:
    executable: /bin/bash
  register: vault2_unseal_keys_exist
  delegate_to: vault-2
  run_once: true
  ignore_errors: true

- name: Arrêter le playbook si les clés sont manquantes
  fail:
    msg: "Les clés de Vault sont manquantes et doivent être restaurées."
  when:
    - vault1_unseal_keys_exist == "0"
    - vault2_unseal_keys_exist == "0"
    - deploy_unseal_keys_exist.stdout == "0"
  run_once: true

- name: Fetch init.file
  fetch:
    src: "{{ vault_home_directory }}/init.file"
    dest: "{{ secrets_dir }}/init.file"
    flat: yes
  when:
    - vault1_unseal_keys_exist != "0"
    - inventory_hostname == 'vault-1'
  become: true

- name: Fetch unseal_keys.txt
  fetch:
    src: "{{ vault_home_directory }}/unseal_keys.txt"
    dest: "{{ secrets_dir }}/unseal_keys.txt"
    flat: yes
  when:
    - vault1_unseal_keys_exist != "0"
    - inventory_hostname == 'vault-1'
  become: true

- name: Fetch vault_token.txt
  fetch:
    src: "{{ vault_home_directory }}/vault_token.txt"
    dest: "{{ secrets_dir }}/vault_token.txt"
    flat: yes
  when:
    - vault1_unseal_keys_exist != "0"
    - inventory_hostname == 'vault-1'
  become: true



# - name: Upload files from vault-1 to deploy
#   synchronize:
#     src: "{{ item }}"
#     dest: "{{ secrets_dir }}/"
#     delegate_to: localhost
#     mode: pull
#   with_items:
#     - "{{ vault_home_directory }}/init.file"
#     - "{{ vault_home_directory }}/unseal_keys.txt"
#     - "{{ vault_home_directory }}/vault_token.txt"
#   when:
#     - inventory_hostname == 'vault-1'
#     - vault1_unseal_keys_exist != "0"
#     - deploy_unseal_keys_exist.stdout == "0"
#   run_once: true
#   become: true

# - name: Vérifier si les clés existent déjà sur deploy
#   shell: |
#     set -o pipefail
#     cat "{{ secrets_dir }}/vault/unseal_keys.txt" 2>/dev/null | wc -l
#   args:
#     executable: /bin/bash
#   register: deploy_unseal_keys_exist
#   delegate_to: deploy
#   run_once: true
#   ignore_errors: true

# - name: Upload files from vault-2 to deploy
#   synchronize:
#     src: "{{ item }}"
#     dest: "{{ secrets_dir }}/"
#     mode: pull
#   with_items:
#     - "{{ vault_home_directory }}/init.file"
#     - "{{ vault_home_directory }}/unseal_keys.txt"
#     - "{{ vault_home_directory }}/vault_token.txt"
#   when:
#     - inventory_hostname == "vault-2"
#     - vault2_unseal_keys_exist != "0"
#     - deploy_unseal_keys_exist.stdout == "0"
#   run_once: true
#   delegate_to: deploy
#   become: true

# - name: Upload files from deploy to vault-1
#   synchronize:
#     src: "{{ item }}"
#     dest: "{{ vault_home_directory }}/"
#     mode: push
#   with_items:
#     - "{{ secrets_dir }}/vault/unseal_keys.txt"
#     - "{{ secrets_dir }}/vault/vault_token.txt"
#   when:
#     - vault1_sealed.stdout == "true"
#     - inventory_hostname == "deploy"
#     - deploy_unseal_keys_exist.stdout != "0"
#   run_once: true
#   delegate_to: vault-1
#   become: true

# - name: Upload files from deploy to vault-2
#   synchronize:
#     src: "{{ item }}"
#     dest: "{{ vault_home_directory }}/"
#     mode: push
#   with_items:
#     - "{{ secrets_dir }}/vault/init.file"
#     - "{{ secrets_dir }}/vault/unseal_keys.txt"
#     - "{{ secrets_dir }}/vault/vault_token.txt"
#   when:
#     - vault2_sealed.stdout == "true"
#     - inventory_hostname == "deploy"
#     - deploy_unseal_keys_exist.stdout != "0"
#   run_once: true
#   delegate_to: vault-2
#   become: true

# - name: Déverrouiller vault-1 si scellé
#   shell: |
#     export VAULT_ADDR="http://{{ hostvars['vault-1']['ansible_' + vault_network_interface]['ipv4']['address'] }}:{{ vault_api_port }}"
#     while read -r key; do
#       vault operator unseal "$key"
#     done < "{{ secrets_dir }}/vault/unseal_keys.txt"
#   args:
#     executable: /bin/bash
#   when: vault1_sealed.stdout == "true"
#   delegate_to: vault-1
#   run_once: true

# - name: Déverrouiller vault-2 si scellé
#   shell: |
#     export VAULT_ADDR="http://{{ hostvars['vault-2']['ansible_' + vault_network_interface]['ipv4']['address'] }}:{{ vault_api_port }}"
#     while read -r key; do
#       vault operator unseal "$key"
#     done < "{{ secrets_dir }}/vault/unseal_keys.txt"
#   args:
#     executable: /bin/bash
#   when: vault2_sealed.stdout == "true"
#   delegate_to: vault-2
#   run_once: true

# - name: Vérifier si les clés existent sur deploy
#   shell: |
#     set -o pipefail
#     cat "{{ secrets_dir }}/vault/unseal_keys.txt" 2>/dev/null | wc -l
#   args:
#     executable: /bin/bash
#   register: deploy_unseal_keys_exist
#   delegate_to: deploy
#   run_once: true
#   ignore_errors: true

# - name: Supprimer de vault-1 et vault-2 les fiers c'init de vault
#   block:
#     - name: Supprimer les clés sur vault-1
#       file:
#         path: "{{ item }}"
#         state: absent
#       with_items:
#         - "{{ vault_home_directory }}/init.file"
#         - "{{ vault_home_directory }}/unseal_keys.txt"
#         - "{{ vault_home_directory }}/vault_token.txt"
#       when:
#         - vault1_unseal_keys_exist.stat.exists
#         - inventory_hostname == "vault-1"
#       become: true
#       run_once: true

#     - name: Supprimer les clés sur vault-2
#       file:
#         path: "{{ item }}"
#         state: absent
#       with_items:
#         - "{{ vault_home_directory }}/init.file"
#         - "{{ vault_home_directory }}/unseal_keys.txt"
#         - "{{ vault_home_directory }}/vault_token.txt"
#       when:
#         - vault2_unseal_keys_exist.stat.exists
#         - inventory_hostname == "vault-2"
#       become: true
#       run_once: true
#   when: deploy_unseal_keys_exist.stdout != "0"