---
- name: Vérifier si local vault est scellé
  shell: |
    export VAULT_ADDR="http://{{ hostvars[inventory_hostname]['ansible_' + vault_network_interface]['ipv4']['address'] }}:{{ vault_api_port }}"
    vault status | grep Sealed | awk '{print $2}'
  args:
    executable: /bin/bash
  register: vault_sealed
  ignore_errors: true

- name: Vérifier si les clés existent déjà sur deploy
  shell: |
    set -o pipefail
    cat "{{ vault_local_dir }}/unseal_keys.txt" 2>/dev/null | wc -l
  args:
    executable: /bin/bash
  register: deploy_unseal_keys_exist
  delegate_to: deploy
  run_once: true
  ignore_errors: true

- name: Arrêter le playbook si les clés sont manquantes
  fail:
    msg: "Les clés de Vault sont manquantes et doivent être restaurées."
  when:
    - deploy_unseal_keys_exist.stdout == "0"
  run_once: true

- name: Upload files from deploy to vaults need unseal
  synchronize:
    src: "{{ item }}"
    dest: "{{ vault_home_directory }}/"
    mode: push
  with_items:
    - "{{ vault_local_dir }}/unseal_keys.txt"
  when:
    - vault_sealed.stdout == "true"
    - deploy_unseal_keys_exist.stdout != "0"
  become: true

- name: Déverrouiller vaults si scellé
  shell: |
    export VAULT_ADDR="http://{{ hostvars[inventory_hostname]['ansible_' + vault_network_interface]['ipv4']['address'] }}:{{ vault_api_port }}"
    while read -r key; do
      vault operator unseal "$key"
    done < "{{ vault_home_directory }}/unseal_keys.txt"
  args:
    executable: /bin/bash
  when:
    - vault_sealed.stdout == "true"
    - vault_mode == "server"

- name: Vérifier si les clés existent ailleur
  shell: |
    set -o pipefail
    cat "{{ vault_home_directory }}/unseal_keys.txt" 2>/dev/null | wc -l
  args:
    executable: /bin/bash
  register: any_unseal_keys_exist
  ignore_errors: true

- name: Remove secrets files from anywhere but not deploy
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ vault_home_directory }}/unseal_keys.txt"
  when: any_unseal_keys_exist.stdout != "0"