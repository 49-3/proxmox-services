---
- name: Installing Vault dependencies via apt
  ansible.builtin.apt:
    name:
      - unzip
      - curl
    state: present
    update_cache: true

- name: Check Vault installation
  shell: vault -v
  environment:
    PATH: "{{ vault_install_directory }}:{{ ansible_env.PATH }}"
  register: vault_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Vault version
  shell: |
    set -o pipefail
    echo "{{ vault_installation.stdout }}" | cut -d' ' -f2 | tr -d 'v'
  args:
    executable: /bin/bash
  when: not vault_installation is failed
  changed_when: false
  check_mode: false
  register: installed_vault_version

- name: Compute if installation is required
  set_fact:
    installation_required: "{{ vault_installation is failed or installed_vault_version.stdout != vault_version }}"

- name: Check Vault package file (local)
  stat:
    path: "{{ role_path }}/files/{{ vault_archive }}"
  become: false
  run_once: true
  register: vault_package
  delegate_to: deploy
  when: installation_required

- name: "Download Vault (local) â†’ {{ vault_zip_url }}"
  get_url:
    url: "{{ vault_download }}"
    dest: "{{ role_path }}/files/{{ vault_archive }}"
    checksum: "sha256:{{ vault_archive_sum }}"
    timeout: "42"
    mode: 0644
  run_once: true
  become:  "{{ vault_privileged_install }}"
  tags: installation
  when: not vault_package.stat.exists | bool
  delegate_to: deploy
  when: installation_required

- name: Unarchive Vault (local)
  unarchive:
    src: "{{ role_path }}/files/{{ vault_archive }}"
    dest: "{{ role_path }}/files/"
    creates: "{{ role_path }}/files/vault"
  run_once: true
  become:  "{{ vault_privileged_install }}"
  tags: installation
  delegate_to: deploy
  when: installation_required

- name: Creating Vault bin directory if outside of '/usr/bin'
  ansible.builtin.file:
    state: directory
    path: '{{ vault_install_directory }}'
    owner: '{{ vault_user }}'
    group: '{{ vault_group }}'
    mode: '0750'
  when:
    - vault_install_directory != "/usr/bin"
    - installation_required


- name: Install Vault
  become: true
  copy:
    src: "{{ role_path }}/files/vault"
    dest: "{{ vault_install_directory }}"
    owner: "root"
    group: "{{ vault_group }}"
    mode: "0750"
  notify: Restart Vault
  tags: installation
  when: installation_required

- name: Cleanup (local)
  file:
    path: "{{ item }}"
    state: "absent"
  with_fileglob: "{{ role_path }}/files/vault"
  run_once: true
  become:  "{{ vault_privileged_install }}"
  tags: installation
  delegate_to: deploy
  when: installation_required