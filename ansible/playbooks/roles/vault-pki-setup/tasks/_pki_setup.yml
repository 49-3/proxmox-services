---
# playbooks/roles/vault_apprle_setup/tasks/_pki_setup.yml

- name: Vérifier si le moteur PKI est déjà activé
  shell: |
    vault secrets list | grep connect_root/ | wc -l
  register: pki_status
  environment:
    VAULT_ADDR: "{{ vault_proxy_addr }}"
    VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
    VAULT_TOKEN: "{{ vault_parent_token.stdout }}"
  changed_when: false
  delegate_to: deploy
  run_once: true

- name: Display Pki status
  debug:
    msg: >
      Pki is {{ 'enabled' if pki_status.stdout == "1" else 'not enabled' }} in Vault
  when: active_vault_host is defined

- name: Activer le moteur PKI sur Vault actif si non activé
  command: >
    vault secrets enable -path=connect_root pki
  when:
    - pki_status.stdout == "0"
  delegate_to: deploy
  run_once: true
  retries: 5         # Nombre de tentatives
  delay: 20           # Délai entre chaque tentative en secondes
  environment:
    VAULT_ADDR: "{{ vault_proxy_addr }}"
    VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
    VAULT_TOKEN: "{{ vault_parent_token.stdout }}"
  register: pki_enable_output

- name: Vérifier si le moteur connect_dc1_inter est déjà activé
  shell: |
    vault secrets list | grep connect_dc1_inter/ | wc -l
  register: connect_dc1_inter_status
  environment:
    VAULT_ADDR: "{{ vault_proxy_addr }}"
    VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
    VAULT_TOKEN: "{{ vault_parent_token.stdout }}"
  changed_when: false
  delegate_to: deploy
  run_once: true

- name: Display connect_dc1_inter status
  debug:
    msg: >
      connect_dc1_inter is {{ 'enabled' if connect_dc1_inter_status.stdout == "1" else 'not enabled' }} in Vault
  when: active_vault_host is defined

- name: Activer le moteur PKI sur Vault actif si non activé
  command: >
    vault secrets enable -path=connect_dc1_inter pki
  when:
    - connect_dc1_inter_status.stdout == "0"
  delegate_to: deploy
  run_once: true
  retries: 5         # Nombre de tentatives
  delay: 20           # Délai entre chaque tentative en secondes
  environment:
    VAULT_ADDR: "{{ vault_proxy_addr }}"
    VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
    VAULT_TOKEN: "{{ vault_parent_token.stdout }}"
  register: pki_enable_output

- name: Ensure {{ vault_policies_directorie }} directory exists
  file:
    path: "{{ vault_policies_directorie }}"
    state: directory
    owner: vault
    group: vault
    mode: '0755'
  delegate_to: deploy
  become: yes

- name: Create vault policy to allow Consul to use pre-existing PKI paths in Vault
  copy:
    dest: "{{ vault_policies_directorie }}/vault-policy-connect-ca.hcl"
    content: |
      path "/sys/mounts/connect_root" {
        capabilities = [ "read" ]
      }

      path "/sys/mounts/connect_dc1_inter" {
        capabilities = [ "read" ]
      }

      path "/sys/mounts/connect_dc1_inter/tune" {
        capabilities = [ "update" ]
      }

      path "/connect_root/" {
        capabilities = [ "read" ]
      }

      path "/connect_root/root/sign-intermediate" {
        capabilities = [ "update" ]
      }

      path "/connect_dc1_inter/*" {
        capabilities = [ "create", "read", "update", "delete", "list" ]
      }

      path "auth/token/renew-self" {
        capabilities = [ "update" ]
      }

      path "auth/token/lookup-self" {
        capabilities = [ "read" ]
      }
    owner: vault
    group: vault
    mode: '0750'
  delegate_to: deploy
  become: true


- name: Vérifier si la conect policie déjà activé dans vault
  shell: |
    vault policy list | grep connect-ca | wc -l
  register: connect_ca_status
  environment:
    VAULT_ADDR: "{{ vault_proxy_addr }}"
    VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
    VAULT_TOKEN: "{{ vault_parent_token.stdout }}"
  changed_when: false
  delegate_to: deploy
  run_once: true

- name: Create the policie
  command: >
    vault policy write connect-ca {{ vault_policies_directorie }}/vault-policy-connect-ca.hcl
  delegate_to: deploy
  when:
    - connect_ca_status.stdout == "0"
  run_once: true
  environment:
    VAULT_ADDR: "{{ vault_proxy_addr }}"
    VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
    VAULT_TOKEN: "{{ vault_parent_token.stdout }}"

- name: Create a Vault token to use for the integration
  command: >
    vault token create -policy=connect-ca
  register: connect_ca_token
  delegate_to: deploy
  run_once: true
  environment:
    VAULT_ADDR: "{{ vault_proxy_addr }}"
    VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
    VAULT_TOKEN: "{{ vault_parent_token.stdout }}"

- name: Store vault token on deploy secret dir
  copy:
    dest: "{{ vault_secrets_directorie }}/connect_ca.token"
    content: |
      {{ connect_ca_token.stdout }}
    owner: vault
    group: vault
    mode: '0750'
  delegate_to: deploy
  become: true


















# - name: Configuration du ttl max pour le pki
#   command: >
#     vault secrets tune -max-lease-ttl={{ ca_pki_ttl }} pki
#   when:
#     - pki_status.stdout == "0"
#   delegate_to: deploy
#   run_once: true
#   environment:
#     VAULT_ADDR: "{{ vault_proxy_addr }}"
#     VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
#     VAULT_TOKEN: "{{ vault_parent_token.stdout }}"

# - name: Configurer les URLs du moteur PKI
#   command: >
#     vault write pki/config/urls
#       issuing_certificates="{{ vault_proxy_addr }}/v1/pki/ca"
#       crl_distribution_points="{{ vault_proxy_addr }}/v1/pki/crl"
#   when:
#     - pki_status.stdout == "0"
#   delegate_to: deploy
#   run_once: true
#   environment:
#     VAULT_ADDR: "{{ vault_proxy_addr }}"
#     VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
#     VAULT_TOKEN: "{{ vault_parent_token.stdout }}"

# - name: Générer le certificat CA racine
#   command: >
#     vault write -field=certificate pki/root/generate/internal
#       common_name="{{ ca_pki_common_name }}"
#       ttl="{{ ca_pki_ttl }}"
#   register: pki_root_cert
#   when:
#     - pki_status.stdout == "0"
#   delegate_to: deploy
#   run_once: true
#   environment:
#     VAULT_ADDR: "{{ vault_proxy_addr }}"
#     VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
#     VAULT_TOKEN: "{{ vault_parent_token.stdout }}"

# - name: Configurer le CA racine dans le moteur PKI
#   command: >
#     vault write pki/config/ca pem_bundle="{{ pki_root_cert.stdout }}"
#   when:
#     - pki_status.stdout == "0"
#   delegate_to: deploy
#   run_once: true
#   environment:
#     VAULT_ADDR: "{{ vault_proxy_addr }}"
#     VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
#     VAULT_TOKEN: "{{ vault_parent_token.stdout }}"

# - name: Générer le CRL
#   command: >
#     vault write -force pki/tidy tidy_cert_store=true tidy_revoked_certs=true
#   register: pki_crl
#   when:
#     - pki_status.stdout == "0"
#   delegate_to: deploy
#   run_once: true
#   environment:
#     VAULT_ADDR: "{{ vault_proxy_addr }}"
#     VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
#     VAULT_TOKEN: "{{ vault_parent_token.stdout }}"

# - name: Check CRL
#   command: >
#     vault read pki/cert/crl
#   when:
#     - pki_status.stdout == "0"
#   delegate_to: deploy
#   environment:
#     VAULT_ADDR: "{{ vault_proxy_addr }}"
#     VAULT_CACERT: "{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
#     VAULT_TOKEN: "{{ vault_parent_token.stdout }}"
#   run_once: true
#   retries: 3
#   delay: 5
#   register: crl_status

# - name: Vérifier la génération du CRL
#   debug:
#     msg: "CRL généré avec succès.\n {{ crl_status.stdout  }}"
#   when:
#     - pki_status.stdout == "0"
#     - crl_status is defined