---
- name: Verifie la presence des nvx certificats
  shell: |
    ls {{ consul_tls_tmp_directory }} | wc -l
  args:
    executable: /bin/bash
  register: certs_status

- name: check certs_status
  debug:
    msg: "certs_status= {{ certs_status.stdout }}"

- name: Redémarrer Vault Agent jusqu'à ce que 3 certificats soient présents
  shell: |
    if [ $(ls {{ consul_tls_tmp_directory }} | wc -l) -ne 3 ]; then
      systemctl restart vault-agent.service
      echo "0"
    else
      echo "1"
    fi
  register: vault_agent_restart
  retries: 5
  delay: 15
  until: vault_agent_restart.stdout == "1"
  when: certs_status.stdout != "3"

- name: Verifie la presence des nvx certificats
  shell: |
    ls {{ consul_tls_tmp_directory }} | wc -l
  args:
    executable: /bin/bash

- name: Remplacer les cerificats
  shell: |
    mv {{ consul_tls_tmp_directory }}/* {{ consul_tls_directory }}
    chown -R root:consul {{ consul_tls_directory }}
    chmod -R 750 {{ consul_tls_directory }}
  args:
    executable: /bin/bash

- name: Reload consul
  systemd:
    name: "consul"
    state: reloaded
    enabled: yes
    daemon_reload: yes

- name: Reload vault serveur
  systemd:
    name: "vault"
    state: reloaded
    enabled: yes
    daemon_reload: yes
  when: vault_mode == "server"

- name: Supprimer le dossier de Certificats temporaire
  ansible.builtin.file:
    path: '{{ item }}'
    state: absent
  with_items:
  - "{{ consul_tls_tmp_directory }}"

- name: Supprimer le dossier de secret tls sur deploy
  ansible.builtin.file:
    path: '{{ item }}'
    state: absent
  with_items:
  - "{{ secrets_dir }}/tls"
  delegate_to: deploy
  run_once: true
  become: true

- name: Déployer la configuration de Vault Agent finale
  template:
    src: "{{ vault_mode }}/vault-agent-approle.hcl.j2"
    dest: "/etc/vault.d/vault-agent.hcl"
    owner: root
    group: root
    mode: '0644'

- name: Restart vault-agent.service
  systemd:
    name: "vault-agent.service"
    state: restarted
    enabled: yes
    daemon_reload: yes