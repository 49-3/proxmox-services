---
- name: Vérifier si vault-1 est initialisé
  shell: |
    export VAULT_ADDR="https://{{ hostvars['vault-1']['ansible_' + vault_network_interface]['ipv4']['address'] }}:{{ vault_api_port }}"
    export VAULT_CACERT="{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
    vault status | grep Initialized | awk '{print $2}'
  args:
    executable: /bin/bash
  register: vault1_initialized
  delegate_to: vault-1
  run_once: true
  changed_when: false  # Cette tâche ne change pas l'état

- name: Vérifier si vault-2 est initialisé
  shell: |
    export VAULT_ADDR="https://{{ hostvars['vault-2']['ansible_' + vault_network_interface]['ipv4']['address'] }}:{{ vault_api_port }}"
    export VAULT_CACERT="{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
    vault status | grep Initialized | awk '{print $2}'
  args:
    executable: /bin/bash
  register: vault2_initialized
  delegate_to: vault-2
  run_once: true
  changed_when: false  # Cette tâche ne change pas l'état

- name: Initialiser Vault sur vault-1 si nécessaire
  block:
    - name: Initialiser Vault sur vault-1
      shell: |
        export VAULT_ADDR="https://{{ hostvars['vault-1']['ansible_' + vault_network_interface]['ipv4']['address'] }}:{{ vault_api_port }}"
        export VAULT_CACERT="{{ vault_tls_directory }}/{{ vault_tls_ca_file }}"
        vault operator init -key-shares={{ key_amount }} -key-threshold={{ key_min_to_unseal }} > {{ vault_home_directory }}/init.file
      args:
        executable: /bin/bash
      delegate_to: vault-1
      run_once: true
      register: vault_init_result
      changed_when: true  # Marque un changement en cas d'initialisation réussie

    - name: Créer le répertoire de vault secrets
      file:
        path: "{{ item }}"
        mode: 0700
        owner: "vault"
        group: "vault"
        state: directory
      with_items:
        - "{{ vault_home_directory }}/secrets"

    - name: Extraire les clés unseal depuis init.file
      shell: |
        grep 'Unseal Key' {{ vault_home_directory }}/init.file | awk '{print $4}'
      register: unseal_keys_output
      delegate_to: vault-1
      run_once: true
      when: vault_init_result.changed

    - name: Extraire le master token
      shell: |
        grep 'Initial Root Token:' {{ vault_home_directory }}/init.file | awk '{print $4}'
      register: vault_token
      delegate_to: vault-1
      run_once: true
      when: vault_init_result.changed

    - name: Enregistrer les clés unseal dans une variable
      set_fact:
        unseal_keys: "{{ unseal_keys_output.stdout_lines }}"
        initial_root_token: "{{ vault_token.stdout }}"
      delegate_to: vault-1
      run_once: true

    - name: Créer le fichier unseal_keys.txt avec les bonnes permissions
      file:
        path: "{{ vault_home_directory }}/unseal_keys.txt"
        state: touch
        mode: '0750'  # Permissions sécurisées
      run_once: true
      delegate_to: vault-1
      when: vault_init_result.changed

    - name: Ajouter les clés unseal dans unseal_keys.txt
      lineinfile:
        path: "{{ vault_home_directory }}/unseal_keys.txt"
        line: "{{ item }}"
        create: yes
        state: present
      loop: "{{ unseal_keys }}"
      run_once: true
      delegate_to: vault-1
      when: vault_init_result.changed

    - name: Sauvegarder le token racine localement
      copy:
        content: |
          {{ initial_root_token }}
        dest: "{{ vault_home_directory }}/vault_token.txt"
      run_once: true
      delegate_to: vault-1
      when: vault_init_result.changed

    - name: Sauvegarder les clés unseal localement dans secrets
      shell: |
        cp "{{ vault_home_directory }}/unseal_keys.txt" {{ vault_home_directory }}/secrets
        chown -R vault:vault {{ vault_home_directory }}/secrets
        chmod -R 0600 {{ vault_home_directory }}/secrets
      run_once: true
      become: true
      delegate_to: vault-1
      when: vault_init_result.changed

    - name: Copier les clés unseal depuis vault-1 vers vault-2
      lineinfile:
        path: "{{ vault_home_directory }}/secrets/unseal_keys.txt"
        line: "{{ item }}"
        create: yes
        state: present
      loop: "{{ hostvars['vault-1'].unseal_keys }}"
      become: true
      run_once: true
      delegate_to: vault-2
      when: hostvars['vault-1'].vault_init_result.changed

    - name: Update les acl des secrets
      shell: |
        chown -R vault:vault {{ vault_home_directory }}/secrets
        chmod -R 0600 {{ vault_home_directory }}/secrets
      run_once: true
      become: true
      delegate_to: vault-2
      when: vault_init_result.changed

  when: vault1_initialized.stdout != "true"